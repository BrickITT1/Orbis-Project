import React, { useEffect, useRef } from 'react';
import { useAppSelector, useAppDispatch } from '../app/hooks';
import { setJoin } from '../features/voice/voiceSlices'; // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —á–∞—Ç–∞
import { VoiceRoomChat } from './Voice/VoiceRoomChat';
import { Message } from '../types/Message';
import { HistoryChat } from './Chat/HistoryChat';
import { InputChat } from './Chat/InputChat';

interface ErrorBoundaryProps {
  children: React.ReactNode;
}

interface ErrorBoundaryState {
  hasError: boolean;
}

class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
  state = { hasError: false };

  static getDerivedStateFromError(): ErrorBoundaryState {
    return { hasError: true };
  }

  componentDidCatch(error: Error, info: React.ErrorInfo) {
    console.error('ErrorBoundary caught:', error, info);
  }

  render() {
    if (this.state.hasError) {
      return <div className="error-fallback">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ</div>;
    }
    return this.props.children;
  }
}

interface ActionProps {
  handleSendMessage: (newMessage: string) => void;
  joinRoomApi: (roomId: number, attempt?: number) => Promise<boolean>
  Messages: {
    messages: Message[];
    user_id: number;
    user_name: string;
    minute: string;
}[] | null;
videoStreams: Record<string, MediaStream>

}

export const Action: React.FC<ActionProps> = ({
  joinRoomApi,
  handleSendMessage,
  Messages,
  videoStreams
}) => {
  const activeChat = useAppSelector(state => state.chat.activeChat);
  const activeServer = useAppSelector(state => state.server.activeserver);
  const token = useAppSelector(state => state.auth.user?.access_token);
  const voiceState = useAppSelector(state => state.voice);
  const MyUsername = useAppSelector(state => state.auth.user?.username);

  const messagesDivRef = useRef<HTMLDivElement>(null);


  const joinRoom = async (roomId: number, attempt = 1) => {
    try {
      // –õ–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
      const success = await joinRoomApi(roomId); // –ó–¥–µ—Å—å joinRoomApi - —ç—Ç–æ —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      
    } catch (error) {
      console.error("Error while joining room:", error);
      if (attempt < 3) {
        setTimeout(() => joinRoom(roomId, attempt + 1), 2000); // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      }
    }
  };

  return (
    <ErrorBoundary>
      {activeChat ? (
        <div className="actions">
          <div className="actions-main">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
            <div className="chat-title">
              <div className="title">{activeChat.name || '–ß–∞—Ç'}</div>
              <div className="buttons">
                {!activeServer && (
                  <button
                    className="voice"
                    onClick={() => {
                      try {
                        joinRoom(activeChat.id);
                      } catch (err) {
                        console.error('Join room error:', err);
                      }
                    }}
                    disabled={voiceState.isConnected}
                  >
                    {/* SVG-–∏–∫–æ–Ω–∫–∞ */}
                    üé§
                  </button>
                )}
              </div>
            </div>

            {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω */}
            {voiceState.isConnected && (<VoiceRoomChat videoStreams={videoStreams}/>)} 
                
            {/* –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ */}
            <HistoryChat groupMessage={Messages} />

            {/* –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */}
            <InputChat handleSendMessage={handleSendMessage} />
          </div>
        </div>
      ) : (
        <div className="actions" />
      )}
    </ErrorBoundary>
  );
};
